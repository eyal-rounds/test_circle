String buildedBranch = System.getenv('CIRCLE_BRANCH');
String branchToUseCounter = System.getenv('BRANCH_WITH_COUNTER') == null ? "" :
    System.getenv('BRANCH_WITH_COUNTER');
buildedBranch = buildedBranch == null ? "" : buildedBranch;
boolean isCircleCI = "true".equals(System.getenv('CIRCLECI'));
boolean isUseCounterOnCI = isCircleCI && buildedBranch.equals(branchToUseCounter);
boolean isMasterOnCircleCi = isCircleCI && buildedBranch.equals("master");
println("is circleci ? ${isCircleCI} , is use counter on ci ? ${isUseCounterOnCI}, is on masterci ? ${isMasterOnCircleCi}")

// only if it's circleci build (not local) and if we are on develop do we need to
// change the version name.
project.android.applicationVariants.all { variant ->
	if( isUseCounterOnCI ){
       	addCounterToVersionName(variant);
		println("adding counter to version");
	}
    variant.outputs.each { output ->
		 output.outputFile = new File(output.outputFile.parent, 
					output.outputFile.name.replace(".apk", "-" + variant.mergedFlavor.versionName + ".apk"))
    }		
}

/**
 * add the version count from circleci cache to the android.defaultConfig.versionName.
 */
void addCounterToVersionName(def variant){
    String count = readBuildCount();
    count = (count == null || count.length() == 0) ? "0" : count;
	project.ext.origVersionName = android.defaultConfig.versionName;
    String origVerName = android.defaultConfig.versionName;
	variant.mergedFlavor.versionName += ("_" + count)
    variant.outputs.each { output ->
		 output.outputFile = new File(output.outputFile.parent, 
					output.outputFile.name.replace(".apk", "-" + variant.mergedFlavor.versionName + ".apk"))
    }	
    println("\nnew verrsion name is : ${android.defaultConfig.versionName}");
}

File getCacheDirFile(){
	String homeDir = "$System.env.HOME"
	File cacheDir = new File(homeDir, ".rounds_cache");
	return cacheDir;
}

/**
 * read the build counter from circleci home dir:
 * ~/.rounds_cache/build_count, it's a text file.
 * @return the build count string or empty string if failed.
 */
String readBuildCount(){
    String count = "";
    File buildCountFile = new File(getCacheDirFile(), "build_count")
    if( buildCountFile.exists() && buildCountFile.canRead() ){
    	try{
			List<String> lines = buildCountFile.readLines("UTF-8");
			if( lines != null && lines.size() > 0){
				count = lines[0]
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
    return count;
}

void increaseBuildCount(){
	String countStr = readBuildCount();
	int count = (countStr != null && countStr.length() != 0) ? Integer.parseInt(countStr) :
		0;
	writeToBuildCountFile(String.valueOf(count+1));
}

void writeToBuildCountFile(String value){
	File buildCountFile = new File(getCacheDirFile(), "build_count")
	if( ! buildCountFile.exists() ){
		buildCountFile.createNewFile();
	}
	buildCountFile.withWriter { w->
		w.print(value);
	}
}

String readCachedVersionName(){
	String versionName = "";
	File versionNameFile = new File(getCacheDirFile(),"version_name")
	if( versionNameFile.exists() && versionNameFile.canRead() ){
		versionName = versionNameFile.getText("UTF-8");
		versionName = versionName.trim()
	}
	return versionName;
}

void writeVersionNameToCache(String versionName){
	File versionNameFile = new File(getCacheDirFile(),"version_name")
	if( ! versionNameFile.exists()) {
		versionNameFile.createNewFile();
	}
	versionNameFile.withWriter { w ->
		w.print(versionName)
	}
}

task createCachedir << {
	String homeDir = "$System.env.HOME"	
	File cacheDir = new File(homeDir,"/.rounds_cache")
	if( ! cacheDir.exists()){
		cacheDir.mkdir()
	}
}

task updateVersionNameAndCounter(dependsOn: 'createCachedir') << {
	String cachedVersionName = readCachedVersionName();
	if( origVersionName.equals(cachedVersionName) ){
		increaseBuildCount()
	}else{
		writeVersionNameToCache(origVersionName);
		writeToBuildCountFile("0");
	}
}
